name: Deploy backend to server

on:
  push:
    branches:
      - main  
    paths-ignore:
      - '**/*.md'

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Deploy to Ubuntu server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}  
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 30m
          script: |
            echo "‚úÖ Conex√£o SSH estabelecida"

            echo "üîê Adicionando chave SSH do GitHub ao known_hosts..."
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            cd ~/Projects/Backend

            if [ -d "api-iot/.git" ]; then
              echo "üîÑ Atualizando reposit√≥rio existente (git pull)..."
              cd api-iot
              git remote set-url origin git@github.com:andersonaguia/api-iot.git
              git pull
            else
              echo "üõ†Ô∏è Clonando reposit√≥rio..."
              git clone git@github.com:andersonaguia/api-iot.git
              cd api-iot
              echo "‚úÖ Clone conclu√≠do!"
            fi
            echo "‚úÖ Reposit√≥rio sincronizado!"

            echo "üõ†Ô∏è Gerando .env tempor√°rio..."
            cat <<EOF > .env
            PORT=${{ secrets.PORT }}
            SOCKETIO_PORT=${{ secrets.SOCKETIO_PORT }}
            WEBSOCKET_PORT=${{ secrets.WEBSOCKET_PORT }}
            DB_DIALECT=${{ secrets.DB_DIALECT }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASS=${{ secrets.DB_PASS }}
            DB_NAME=${{ secrets.DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            WHATSAPP_API_CONNECT_URL=${{ secrets.WHATSAPP_API_CONNECT_URL }}
            WHATSAPP_API_SEND_MESSAGE_URL=${{ secrets.WHATSAPP_API_SEND_MESSAGE_URL }}
            SERVER_IP=${{ secrets.SERVER_IP }}
            EOF

            echo "üèóÔ∏è Construindo imagem..."
            docker compose build --no-cache

            echo "üõë Derrubando container antigo..."
            docker compose down

            echo "üöÄ Subindo novo container com imagem j√° pronta..."
            docker compose up -d

            echo "üßπ Limpando .env..."
            rm -f .env

            echo "‚úÖ Deploy conclu√≠do com sucesso!"

